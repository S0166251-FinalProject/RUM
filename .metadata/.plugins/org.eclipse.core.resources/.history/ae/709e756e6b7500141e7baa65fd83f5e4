import types 
from collections import namedtuple 
import abc
from abc import ABCMeta      

class Interceptor(object):
    
    __metaclass__ = ABCMeta
    wrappers = {}    
    Service = namedtuple("Service", ["Class", "methodName"]) 
    
    def __init__(self):
        return    

    def registerToServiceInvocation(self, component, method):
        name = method.__name__
        service = Interceptor.Service(Class = component, methodName = name)
        if service in Interceptor.wrappers:
            Interceptor.wrappers[service].append(self)
        else:
            wrapper = Interceptor.__createWrapper__(component, method)
            wrapper.__name__ = name
            setattr(component, name, types.MethodType(wrapper, self))        
            Interceptor.wrappers[service] = [self]
            
    @staticmethod
    def __createWrapper__(component, method):
        def wrapper(self, *args, **kwargs):
            old = {}
            for var in component.__dict__:
                old[var] = getattr(component, var)       
                
            result = method(*args, **kwargs)
            new = {}
            for var in component.__dict__:
                new[var] = getattr(component, var)
            self.interceptInvocation(old, new, component, method)
            return result
        return wrapper
    
    @staticmethod
    def __createLightWeightWrapper__(component, method):
        def wrapper(self, *args, **kwargs):
            result = method(*args, **kwargs)
            self.interceptInvocation({}, {}, component, method)
            return result
        return wrapper    
    
    
    @abc.abstractmethod
    def interceptInvocation(self, old, new, component, method):
        raise NotImplementedError('Classes which inherit from rum.Interceptor must implement interceptInvocation(self, old, new, component, method)')
    
    
    